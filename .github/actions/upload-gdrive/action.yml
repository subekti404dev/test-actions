name: Upload GDrive
description: "upload file into GDrive"

inputs:
  env_url:
    description: "Protected JSON URL"
    required: true
  env_token:
    description: "Bearer or token for the protected JSON"
    required: true
  file_path:
    description: "Filepath of the file that you want to upload"
    required: true

outputs:
  file_id:
    description: "Drive file ID after upload"
    value: ${{ steps.rclone_copy.outputs.file_id }}
  filename:
    description: "Basename of uploaded file"
    value: ${{ steps.rclone_copy.outputs.filename }}
  query:
    description: "Filename without extension"
    value: ${{ steps.rclone_copy.outputs.query }}
  imdb:
    description: "IMDb id prefix"
    value: ${{ steps.rclone_copy.outputs.imdb }}
  remote_filepath:
    description: "Rclone remote path to the uploaded file"
    value: ${{ steps.rclone_copy.outputs.remote_filepath }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    - name: Load Remote ENV from Protected JSON
      uses: subekti404dev/gha-json-env@v1
      with:
        url: ${{ inputs.env_url }}
        token: ${{ inputs.env_token }}

    - name: Setup Rclone Config
      shell: sh
      run: |
        set -eu
        rclone_conf_path=$(rclone config file | grep 'rclone.conf' | cut -d' ' -f6)
        mkdir -p "$(dirname "$rclone_conf_path")"
        config_url="${{ env.rclone_config_url }}"
        if [ -z "${config_url:-}" ]; then
          echo "::error::Missing rclone_config_url from JSON env."
          exit 1
        fi
        curl -fsSL "$config_url" > "$rclone_conf_path"
        if [ ! -s "$rclone_conf_path" ]; then
          echo "::error::Downloaded rclone.conf is empty at '$rclone_conf_path'"
          exit 1
        fi

    - name: Rclone copy by IMDb folder
      id: rclone_copy
      shell: sh
      env:
        video_file_path: ${{ inputs.file_path }}
        dest_remote: gdrive1
        dest_root: GHA
      run: |
        set -eu

        # Derive variables
        filename=$(basename "$video_file_path")
        query="${filename%.*}"        # filename without extension
        imdb="${query%%:*}"           # take part before first colon

        echo "filename: $filename"
        echo "query:    $query"
        echo "imdb:     $imdb"

        # Ensure destination folder exists (safe if it already exists)
        rclone mkdir "${dest_remote}:${dest_root}/${imdb}"

        # Upload exact path
        rclone copy \
          "$video_file_path" \
          "${dest_remote}:${dest_root}/${imdb}" \
          --drive-upload-cutoff 1000T

        # Obtain Drive file ID using rclone lsf (avoids JSON parsing)
        file_id=$(rclone lsf \
          --files-only \
          --format "i" \
          --include "${filename}" \
          "${dest_remote}:${dest_root}/${imdb}" | head -n1)

        if [ -z "${file_id:-}" ]; then
          echo "::error::Failed to determine file_id for '${filename}' in '${dest_remote}:${dest_root}/${imdb}'." >&2
          rclone ls -R "${dest_remote}:${dest_root}/${imdb}" || true
          exit 1
        fi

        # Compose remote filepath for downstream actions
        remote_filepath="${dest_remote}:${dest_root}/${imdb}/${filename}"

        # Export outputs
        {
          echo "filename=$filename"
          echo "query=$query"
          echo "imdb=$imdb"
          echo "file_id=$file_id"
          echo "remote_filepath=$remote_filepath"
        } >> "$GITHUB_OUTPUT"

    # Setter no longer needed (removed)
