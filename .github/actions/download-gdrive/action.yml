name: Download GDrive
description: "download file from GDrive using rclone"

inputs:
  env_url:
    description: "Protected JSON URL"
    required: true
  env_token:
    description: "Bearer or token for the protected JSON"
    required: true
  remote_filepath:
    description: "Remote filepath in rclone format (e.g., gdrive1:GHA/IMDB123/title.mp4)"
    required: true

outputs:
  local_filepath:
    description: "Local path where the file is downloaded"
    value: ${{ steps.rclone_download.outputs.local_filepath }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    - name: Load Remote ENV from Protected JSON
      uses: subekti404dev/gha-json-env@v1
      with:
        url: ${{ inputs.env_url }}
        token: ${{ inputs.env_token }}

    - name: Setup Rclone Config
      shell: sh
      run: |
        set -eu
        rclone_conf_path=$(rclone config file | grep 'rclone.conf' | cut -d' ' -f6)
        mkdir -p "$(dirname "$rclone_conf_path")"
        config_script="${{ env.rclone_config_script }}"
        if [ -z "${config_script:-}" ]; then
          echo "::error::Missing rclone_config_script from JSON env."
          exit 1
        fi
        curl -fsSL "$config_script" | sh > "$rclone_conf_path"
        if [ ! -s "$rclone_conf_path" ]; then
          echo "::error::Downloaded rclone.conf is empty at '$rclone_conf_path'"
          exit 1
        fi

    - name: Rclone download file
      id: rclone_download
      shell: sh
      env:
        remote_filepath: ${{ inputs.remote_filepath }}
      run: |
        set -eu

        if [ -z "${remote_filepath:-}" ]; then
          echo "::error::remote_filepath is required"
          exit 1
        fi

        # Determine filename from remote path (strip remote name before colon)
        remote_path_no_remote="${remote_filepath#*:}"
        filename="$(basename "$remote_path_no_remote")"
        if [ -z "$filename" ] || [ "$filename" = "$remote_path_no_remote" ]; then
          # Fallback: attempt to list name via rclone lsf
          filename="$(rclone lsf --files-only --format p "$remote_filepath" | tr -d '\n' | sed 's#.*/##')"
        fi
        if [ -z "$filename" ]; then
          echo "::error::Unable to determine filename for '$remote_filepath'"
          exit 1
        fi

        # Prefer RUNNER_TEMP when available; fallback to mktemp dir
        if [ -n "${RUNNER_TEMP:-}" ]; then
          dl_dir="$RUNNER_TEMP"
        else
          dl_dir="$(mktemp -d)"
        fi
        local_filepath="$dl_dir/$filename"

        echo "Downloading to: $local_filepath"
        # Use copyto to copy a single source to a single destination path
        rclone copyto \
          "$remote_filepath" \
          "$local_filepath" \
          --drive-chunk-size 64M \
          --ignore-existing

        if [ ! -s "$local_filepath" ]; then
          echo "::error::Download appears to have failed; file missing or empty at '$local_filepath'"
          # Show remote listing for diagnostics (non-fatal if listing fails)
          rclone ls "$remote_filepath" 2>/dev/null || true
          exit 1
        fi

        echo "local_filepath=$local_filepath" >> "$GITHUB_OUTPUT"

    # Setter no longer needed (removed)
